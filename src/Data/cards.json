{
  "cards": [
    {
      "question": "What is React?",
      "answer": "React is an open-source frontend JavaScript library which is used for building user interfaces especially for single page applications. It is used for handling view layer for web and mobile apps."
    },
    {
      "question": "What are the major features of React?",
      "answer": "It uses VirtualDOM instead of RealDOM considering that RealDOM manipulations are expensive.Supports server side rendering. Follows unidirectional data flow or data binding.Uses reusable/composable UI components to develop the view."
    },
    {
      "question": "What is JSX?",
      "answer": "JSX is a XML-like syntax extension to ECMAScript (the acronym stands for JavaScript XML). Basically it just provides syntactic sugar for the React.createElement() function, giving us expressiveness of JavaScript along with HTML like template syntax."
    },
    {
      "question": "What is the difference between Element and Component?",
      "answer": "An Element is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components. Elements can contain other Elements in their props. Creating a React element is cheap. Once an element is created, it is never mutated. Whereas a component can be declared in several different ways. It can be a class with a render() method. Alternatively, in simple cases, it can be defined as a function"
    },
    {
      "question": "How to create components in React?",
      "answer": "There are two possible ways to create a component.

      Function Components: This is the simplest way to create a component. Those are pure JavaScript functions that accept props object as first parameter and return React elements:

      function Greeting({ message }) {
        return <h1>{`Hello, ${message}`}</h1>

      }
      Class Components: You can also use ES6 class to define a component. The above function component can be written as:

      class Greeting extends React.Component {
        render() {
          return <h1>{`Hello, ${this.props.message}`}</h1>
        }
      }"
    },
    {
      "question": "When to use a Class Component over a Function Component?",
      "answer": "If the component needs state or lifecycle methods then use class component otherwise use function component. However, from React 16.8 with the addition of Hooks, you could use state , lifecycle methods and other features that were only available in class component right in your function component."
    },
    {
      "question": "What are Pure Components?",
      "answer": "React.PureComponent is exactly the same as React.Component except that it handles the shouldComponentUpdate() method for you. When props or state changes, PureComponent will do a shallow comparison on both props and state. Component on the other hand won't compare current props and state to next out of the box. Thus, the component will re-render by default whenever shouldComponentUpdate is called."
    },
    {
      "question": "What is state in React?",
      "answer": "State of a component is an object that holds some information that may change over the lifetime of the component. We should always try to make our state as simple as possible and minimize the number of stateful components. State is similar to props, but it is private and fully controlled by the component. i.e, It is not accessible to any component other than the one that owns and sets it."
    },
    {
      "question": "What are props in React?",
      "answer": "Props are inputs to components. They are single values or objects containing a set of values that are passed to components on creation using a naming convention similar to HTML-tag attributes. They are data passed down from a parent component to a child component.

      The primary purpose of props in React is to provide following component functionality:

      Pass custom data to your component.
      Trigger state changes.
      Use via this.props.reactProp inside component's render() method.
      For example, let us create an element with reactProp property:

      <Element reactProp={'1'} />
      This reactProp (or whatever you came up with) name then becomes a property attached to React's native props object which originally already exists on all components created using React library.

      props.reactProp"
    },
    {
      "question": "What is the difference between state and props?",
      "answer": "Both props and state are plain JavaScript objects. While both of them hold information that influences the output of render, they are different in their functionality with respect to component. Props get passed to the component similar to function parameters whereas state is managed within the component similar to variables declared within a function."
    },
    {
      "question": "Why should we not update the state directly?",
      "answer": "If you try to update state directly then it won't re-render the component.

      //Wrong
      this.state.message = 'Hello world'
      Instead use setState() method. It schedules an update to a component's state object. When state changes, the component responds by re-rendering.

      //Correct
      this.setState({ message: 'Hello World' })
      Note: You can directly assign to the state object either in constructor or using latest javascript's class field declaration syntax."
    },
    {
      "question": "What is the purpose of callback function as an argument of setState()?",
      "answer": "The callback function is invoked when setState finished and the component gets rendered. Since setState() is asynchronous the callback function is used for any post action.

      Note: It is recommended to use lifecycle method rather than this callback function.

      setState({ name: 'John' }, () => console.log('The name has updated and component re-rendered'))"
    },
    {
      "question": "What is the difference between HTML and React event handling?",
      "answer": "In HTML, the event name should be in lowercase:
      <button onclick='activateLasers()'>
      Whereas in React it follows camelCase convention:

      <button onClick={activateLasers}>
      In HTML, you can return false to prevent default behavior:
      <a href='#' onclick='console.log("The link was clicked."); return false;' />
      Whereas in React you must call preventDefault() explicitly:

      function handleClick(event) {
        event.preventDefault()
        console.log('The link was clicked.')
      }
      In HTML, you need to invoke the function by appending () Whereas in react you should not append () with the function name. (refer "activateLasers" function in the first point for example)"
    },
    {
      "question": "How to bind methods or event handlers in JSX callbacks?",
      "answer": "There are 3 possible ways to achieve this:

      Binding in Constructor: In JavaScript classes, the methods are not bound by default. The same thing applies for React event handlers defined as class methods. Normally we bind them in constructor.
      class Component extends React.Componenet {
        constructor(props) {
          super(props)
          this.handleClick = this.handleClick.bind(this)
        }

        handleClick() {
          // ...
        }
      }
      Public class fields syntax: If you don't like to use bind approach then public class fields syntax can be used to correctly bind callbacks.
      handleClick = () => {
        console.log('this is:', this)
      }
      <button onClick={this.handleClick}>
        {'Click me'}
      </button>
      Arrow functions in callbacks: You can use arrow functions directly in the callbacks.
      <button onClick={(event) => this.handleClick(event)}>
        {'Click me'}
      </button>
      Note: If the callback is passed as prop to child components, those components might do an extra re-rendering. In those cases, it is preferred to go with .bind() or public class fields syntax approach considering performance."
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    },
    {
      "question": "test",
      "answer": "test"
    }
  ]
}
